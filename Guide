
Korean character adjustment (한글 문자배열 조정) in UTF-8 

Eratostenes             20.03.24

Factorial               20.03.24

Involution or Power (거듭제곱 법)   20.03.24

Fibonacci numbers       20.03.24

Hanoi Tower             20.03.24

Polynomial Expression 1 20.03.24
    모든 차수에 대한 계수값을 배열로 저장.
    하나의 다항식을 하나의 배열로 표현. 
    장점 : 구현이 쉬움. 
    단점 : 항의 계수가 0인 항이 많으면 공간 낭비가 심한 다항식 표현법

Polynomial Expression 2 20.03.24
    개인적으로 선호되지 않는 방법임. 
    0이 아닌 항만을 배열에 저장 
    (계수, 차수) 형식으로 배열에 저장 함
    배열 하나에 여러 다항식이 공존할 수 있고 각 다항식의 범위는 As,Ae 같은 변수로 지정되있다. 

Sparse Matrix           20.03.24
    이러한 0들이 많은 행렬을 희소행렬이라 하는데, 이를 효율적으로 저장하는 방법. 
    대부분의 항이 0인 행렬인 경우 일반적인 2차원 배열에 행렬을 저장하는 것은 메모리 낭비가 심하다.

List made by Array      20.03.24
    용량에 제한이 있고 연산이 비효율적이지만 메모리 정적인 방법 

Singly Linked List      20.03.24
    여기서 소개하는 리스트는 실제로 써먹기 어려움, 차라리 노드 개수를 가지고 headnode를 관리하는 구조체포인터를 추가로 정의해서 쓰는게 낫다.  
 
Circular Linked List    20.03.31

Doubly Linked List      20.04.01
    미완성
Doubly Circular Linked List     20.04.01
    구현안함
Polynomial Expression using Singly Linked List in Example   20.04.02
    delete, Search, Sort 미구현. 추후구현

Stack   20.04.02

Stack_Example 20.04.11
    중위표기수식 -> 후위표기수식 변환
    후위 표기식 계산
    미로 탐색
    미로 탐색 가장 작은 규모 예제.

Queue 20.04.12
    Using Array Queue
    Using List Queue

Deck 20.04.12
    Doubly Linked List를 이용한 덱 구현.

Tree 20.04.26 ~ 
    File 구분
        Binary Tree //저장 규칙이 없는, 순회와 노드 개수, 총 높이만 잴 수 있음
        Thread Binary Tree //미완,미구현
        Binary Search Tree //저장방식 O, 삽입,삭제 연산 O, 탐색 O,순환 또는 반복 구분 O //20.05.03
        Heap    //20.05.04
        Heap_Example //이산 이벤트 아이스크림 가게 시뮬레이션 //20.05.05
    자세한 내용
        종류
            Binary Tree
            이진트리 : 
                정의
                    모든 노드가 2개의 서브트리를 가지고 있는 트리.(서브트리는 공집합일 수 있음)
                성질 
                    노드 개수가 n개이면 간선의 개수 n-1
                    높이가 h인 이진 트리의 경우, 최소 h개 노드, 최대 2^(h) -1 개 노드 가짐
                분류
                    [#저장방법이 규정되어 있지 않은 일반적인 이진 트리를 말한다.
                    포화 이진 트리
                        각 레벨(높이)에 노드가 꽉 차있는 이진트리(공집합 혹은 자식노드2개만 허용)
                    완전 이진 트리
                        레벨(높이) 1부터 k-1까지는 노드가 모두 채워져있고 마지막 레벨 k에서 왼쪽부터 오른쪽으로 순서대로 채워져 있는 이진 트리
                    ]

                    스레드 이진 트리                                - 중위순회를 함수의 순환없이 주소 이동으로 하는 방법(단말노드의 NULL 이용)
                    이진 탐색 트리(BST : Binary Search Tree)        - 탐색 작업을 효율적으로 하기 위한 구조,중위순회시 오름차순으로 정렬된 값 얻기 가능
                    Heap                                            - 완전 이진 트리 이용, 우선순위 큐를 쉽고 강력하게 구현 가능, 정렬도 가능

                    Balanced Binary Search Tree // 바로 위 이진 탐색 트리의 개선 버전.
                        종류
                            AVL Tree
                            Splay Tree
                            Red Black Tree
                            2-3-4 Tree

                        

            Non-Binary Tree
            일반트리



Sorting 정렬
    기초적인 정렬
        Selection_Sort 선택 정렬 //20.05.05
        Bubble_Sort 버블 정렬   //20.05.05
        Insert_Sort 삽입 정렬   //20.05.05
        쉘 정렬
    
    Quick_Sort 퀵 정렬  //20.05.05
    합병 정렬
    히프 정렬

    분포에 의한 정렬
        계수 정렬
        기수 정렬

    외부 정렬
        균형적 다방향 합병 정렬
        대치 선택
        다단계 합병 정렬